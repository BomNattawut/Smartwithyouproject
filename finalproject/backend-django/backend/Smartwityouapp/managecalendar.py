import os
import json
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from rest_framework.response import Response
from .loadtoken import load_credentials
from.models import Party,PartyMember,CustomUser
from.serializer import *
# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå Credential ‡πÅ‡∏•‡∏∞ Token
CREDENTIALS_FILE = "D:/Seniaproject/backend-django/backend/Smartwityouapp/calender_api_service/client_secret_679774878907-bo7e2ropa8epijvmjfqqqsvtbq8ticqd.apps.googleusercontent.com.json"
TOKEN_FILE = "D:/Seniaproject/backend-django/backend/Smartwityouapp/tokens/"
SCOPES = ["https://www.googleapis.com/auth/calendar.events"]
REDIRECT_URI = "http://127.0.0.1:8000/Smartwityouapp/oauth2callback/"

def get_credentials(userid):
    """ ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Credentials ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Calendar API """
    creds = None

    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    if os.path.exists(TOKEN_FILE):
        try:
            creds = load_credentials(user_id=userid)
        except Exception as e:
            print("üî¥ ERROR: Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏ö token.json ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà:", e)
            creds = None

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())  # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        else:
            flow = Flow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            flow.redirect_uri = REDIRECT_URI
            auth_url,state = flow.authorization_url(
                prompt="consent",
                state=userid
                    
                                                 )

            print(f"üîπ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà URL ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Calendar:\n{auth_url}")
            return auth_url  # ‡∏Ñ‡∏∑‡∏ô URL ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô

    return creds

def get_calendar_service(userid):
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Calendar API """
    creds = get_credentials(userid=userid)
    if isinstance(creds, str):
        print("üî¥ ERROR: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå OAuth ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        return creds

    service = build("calendar", "v3", credentials=creds)
    return service
def create_event(event_data,userid):
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Google Calendar """
    service = get_calendar_service(userid=userid)
    
    if isinstance(service, str):  # üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ URL ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        return {"auth_url": service}  # ‚úÖ ‡∏™‡πà‡∏á URL ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Flutter

    event = {
        "summary": event_data["title"],
        "location": event_data.get("location", ""),
        "description": event_data.get("description", ""),
        "start": {
            "dateTime": event_data["start_time"],
            "timeZone": "Asia/Bangkok",
        },
        "end": {
            "dateTime": event_data["finish_time"],
            "timeZone": "Asia/Bangkok",
        },
        "attendees": [{"email": event_data["leader"]}],  # ‚úÖ ‡πÉ‡∏ä‡πâ List ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    }

    event_result = service.events().insert(calendarId="primary", body=event).execute()
    party = Party.objects.get(id=event_data["party_id"])
    party.google_event_id = event_result["id"]  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å eventId
    party.save()
    return event_result
def update_event(party_id, updated_data, userid):
    service = get_calendar_service(userid=userid)
    party = Party.objects.get(id=party_id)
    event_id = party.google_event_id  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ Event ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    print(f'üìå Event ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {event_id}')
    
    if not event_id:
        print('‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö Event ID ‡πÉ‡∏ô Database')
        return {"error": "Event ID not found for this party"}

    updated_event = {
        "summary": updated_data["title"],
        "location": updated_data["location"],
        "description": updated_data["description"],
        "start": {
            "dateTime": updated_data["start_time"],
            "timeZone": "Asia/Bangkok",
        },
        "end": {
            "dateTime": updated_data["finish_time"],
            "timeZone": "Asia/Bangkok",
        },
    }

    print(f'üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Event: {updated_event}')

    try:
        updated_result = service.events().update(
            calendarId="primary", eventId=event_id, body=updated_event
        ).execute()
        print(f'‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {updated_result}')
        return updated_result  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    except Exception as e:
        print(f'‚ùå ERROR: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}')
        return {"error": str(e)}
def delete_event(party_id,userid):
    service=get_calendar_service(userid=userid)
    party=Party.objects.get(id=party_id);
    event_id=party.google_event_id

    if event_id:
            service.events().delete(calendarId="primary", eventId=event_id).execute()
            party.google_event_id = None  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            party.save()
            return {"message": "Event deleted from Google Calendar"}
        
    return {"error": "No eventId found"}
def member_event(party_id,userid,event_data):

    service = get_calendar_service(userid=userid)
    
    if isinstance(service, str):  # üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ URL ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        return {"auth_url": service}  # ‚úÖ ‡∏™‡πà‡∏á URL ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Flutter
    user=CustomUser.objects.get(id=userid)
    event_date = datetime.strptime(event_data['date'], "%Y-%m-%d").date()
    start_time = datetime.strptime(event_data['start_time'], "%H:%M:%S").time()
    finish_time = datetime.strptime(event_data['finish_time'], "%H:%M:%S").time()

        # ‚úÖ ‡πÉ‡∏ä‡πâ `datetime.combine()` ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    start_datetime = datetime.combine(event_date, start_time).isoformat()
    finish_datetime = datetime.combine(event_date, finish_time).isoformat()
    event = {
        "summary": event_data["title"],
        "location": event_data.get("location", ""),
        "description": event_data.get("description", ""),
        "start": {
            "dateTime": start_datetime,
            "timeZone": "Asia/Bangkok",
        },
        "end": {
            "dateTime": finish_datetime,
            "timeZone": "Asia/Bangkok",
        },
        "attendees": [{"email": user.email}],  # ‚úÖ ‡πÉ‡∏ä‡πâ List ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    }

    event_result = service.events().insert(calendarId="primary", body=event).execute()
    member=PartyMember.objects.get(user=userid,party=party_id)
    memberevent=PartyMemberEvent.objects.get(member=member)
    memberevent.google_event_id=event_result['id']
    memberevent.save()
    return event_result
def update_memberevent(party_id, updated_data, userid):
    service = get_calendar_service(userid=userid)
    user=CustomUser.objects.get(id=userid)
    party = Party.objects.get(id=party_id)
    member=PartyMember.objects.get(user=user.id,party=party.id) # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ Event ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    memberevent=PartyMemberEvent.objects.get(member=member.id)
    event_id=memberevent.google_event_id
    print(f'üìå Event ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {event_id}')
    
    if not event_id:
        print('‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö Event ID ‡πÉ‡∏ô Database')
        return {"error": "Event ID not found for this party"}
    event_date = datetime.strptime(updated_data['date'], "%Y-%m-%d").date()
    start_time = datetime.strptime(updated_data['start_time'], "%H:%M:%S").time()
    finish_time = datetime.strptime(updated_data['finish_time'], "%H:%M:%S").time()

        # ‚úÖ ‡πÉ‡∏ä‡πâ `datetime.combine()` ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    start_datetime = datetime.combine(event_date, start_time).isoformat()
    finish_datetime = datetime.combine(event_date, finish_time).isoformat()
    updated_event = {
        "summary": updated_data["title"],
        "location": updated_data["location"],
        "description": updated_data["description"],
        "start": {
            "dateTime": start_datetime,
            "timeZone": "Asia/Bangkok",
        },
        "end": {
            "dateTime": finish_datetime,
            "timeZone": "Asia/Bangkok",
        },
    }

    print(f'üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Event: {updated_event}')

    try:
        updated_result = service.events().update(
            calendarId="primary", eventId=event_id, body=updated_event
        ).execute()
        print(f'‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {updated_result}')
        return updated_result  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    except Exception as e:
        print(f'‚ùå ERROR: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}')
        return {"error": str(e)}
