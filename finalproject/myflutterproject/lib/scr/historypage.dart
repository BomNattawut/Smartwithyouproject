import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:myflutterproject/scr/workoutpage.dart';

class PartyHistoryPage extends StatefulWidget {
  @override
  _PartyHistoryPageState createState() => _PartyHistoryPageState();
}

class _PartyHistoryPageState extends State<PartyHistoryPage> {
  List<Map<String, dynamic>> partyHistory = [];
  bool memoryloading=true;

  @override
  void initState() {
    super.initState();
    fetchPartyHistory();
  }

  Future<void> fetchPartyHistory() async {
    final prefs = await SharedPreferences.getInstance();
    String? accessToken = prefs.getString('access_token');
    try {
      final response = await http.get(
        Uri.parse('http://10.0.2.2:8000/Smartwityouapp/fecthhistorygallary/'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $accessToken',
        },
      );
      if (response.statusCode == 200) {
        memoryloading=false;
        final data = jsonDecode(utf8.decode(response.bodyBytes));
        print('historyparty:${data}');
        final List<dynamic> historyData = data['history'] ?? [];

        setState(() {
          partyHistory = historyData.cast<Map<String, dynamic>>();
        });
      }
    } catch (e) {
      print('Error: $e');
    }
  }

  void _openShareDialog(Map<String, dynamic> memory) {
    TextEditingController captionController = TextEditingController();
    List<String> selectedImages = []; // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(builder: (context, setState) {
          return AlertDialog(
            title: Text("üì∏ ‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥"),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text("üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"),
                TextField(
                  controller: captionController,
                  maxLines: 3,
                  decoration: InputDecoration(
                    hintText: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡πà‡∏ô...",
                    border: OutlineInputBorder(),
                  ),
                ),
                SizedBox(height: 10),
                Text("üì∑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå"),
                Wrap(
                  spacing: 5,
                  children: List.generate(memory['images'].length, (index) {
                    String imageUrl = memory['images'][index];
                    bool isSelected = selectedImages.contains(imageUrl);

                    return GestureDetector(
                      onTap: () {
                        setState(() {
                          if (isSelected) {
                            selectedImages.remove(imageUrl);
                          } else {
                            selectedImages.add(imageUrl);
                          }
                        });
                      },
                      child: Stack(
                        children: [
                          Image.network(
                            'http://10.0.2.2:8000$imageUrl',
                            width: 80,
                            height: 80,
                            fit: BoxFit.cover,
                          ),
                          if (isSelected)
                            Positioned(
                              top: 5,
                              right: 5,
                              child: Icon(Icons.check_circle,
                                  color: Colors.green, size: 20),
                            ),
                        ],
                      ),
                    );
                  }),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"),
              ),
              ElevatedButton(
                onPressed: () {
                  _shareMemory(memory, captionController.text, selectedImages);
                },
                child: Text("üì¢ ‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏•‡∏¢!"),
              ),
            ],
          );
        });
      },
    );
  }

  Future<void> _shareMemory(Map<String, dynamic> memory, String caption,
      List<String> selectedImages) async {
    final prefs = await SharedPreferences.getInstance();
    String? accessToken = prefs.getString('access_token');
    String? userId = prefs.getString('userid');

    try {
      final response = await http.post(
        Uri.parse('http://10.0.2.2:8000/Smartwityouapp/sharememory/'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $accessToken',
        },
        body: json.encode({
          "user_id": userId ?? '',
          "party_id": memory['id'],
          "text": caption,
          "selected_images":
              selectedImages, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        }),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‚úÖ ‡πÅ‡∏ä‡∏£‡πå Memory ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå Memory ‡πÑ‡∏î‡πâ!")),
        );
      }
    } catch (e) {
      print("‚ö†Ô∏è Error: $e");
    }
  }

  Future<void> deleteAlbum(int albumId) async {
    final prefs = await SharedPreferences.getInstance();
    String? accessToken = prefs.getString('access_token');
    String? userId = prefs.getString('userid');

    try {
      final response = await http.delete(
        Uri.parse('http://10.0.2.2:8000/Smartwityouapp/deletepartyalbum/'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $accessToken',
          'userId': userId ?? '',
          'albumId': albumId.toString(),
        },
      );

      if (response.statusCode == 200) {
        print("‚úÖ ‡∏•‡∏ö‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        fetchPartyHistory();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("üéâ ‡∏•‡∏ö‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")),
        );
      } else {
        print("‚õî ‡∏•‡∏ö‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${response.statusCode}");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‚ùå ‡∏•‡∏ö‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")),
        );
      }
    } catch (e) {
      print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("üìú ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",style: GoogleFonts.notoSansThai(
        fontWeight: FontWeight.bold,
        color: Colors.white,
      ),),
        backgroundColor: Colors.orange,
      ),
      backgroundColor: Colors.grey[800],
      body: 
      memoryloading ? 
      Center(
          child: Center(
                  child: Center(child: Center(child: CircularProgressIndicator(color: Colors.orange)) ,),
              ),
      ):
      partyHistory.isEmpty
          ? Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
                Icon(
            Icons.camera_alt, // üí° ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠"
            size: 80,
            color: Colors.grey[600],
          ),
          
         
            ],
          ),
          const SizedBox(height: 16),
           const Text(
            '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏•‡∏≤‡∏ö‡∏±‡πâ‡∏°',
            style: TextStyle(
              fontSize: 18,
              color: Colors.grey,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      )
          : ListView.builder(
              itemCount: partyHistory.length,
              itemBuilder: (context, index) {
                var party = partyHistory[index];

                DateTime completedAt = DateTime.parse(party['completed_at']);
                DateTime now = DateTime.now();
                bool canUpload = now.difference(completedAt).inHours < 24;

                return Card(
                  margin: EdgeInsets.all(10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          ElevatedButton.icon(
                            onPressed: () {
                              _openShareDialog(party);
                            },
                            label: Text('‡πÅ‡∏ä‡∏£‡πå'),
                            icon: Icon(Icons.share),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.blue,
                              foregroundColor: Colors.white,
                            ),
                          ),
                          SizedBox(
                            width: 7,
                          ),
                          ElevatedButton.icon(
                            onPressed: () async {
                              bool confirm = await showDialog(
                                context: context,
                                builder: (context) => AlertDialog(
                                  title: Text("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö"),
                                  content:
                                      Text("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"),
                                  actions: [
                                    TextButton(
                                      onPressed: () =>
                                          Navigator.pop(context, false),
                                      child: Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"),
                                    ),
                                    TextButton(
                                      onPressed: () =>
                                          Navigator.pop(context, true),
                                      child: Text("‡∏•‡∏ö"),
                                    ),
                                  ],
                                ),
                              );

                              if (confirm) {
                                await deleteAlbum(party['id']);
                              }
                            },
                            icon: Icon(Icons.delete, color: Colors.white),
                            label: Text("‡∏•‡∏ö‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°"),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.red,
                            ),
                          ),
                          SizedBox(width: 10),
                        ],
                      ),
                       ListTile(
                        title: Text("${party['party_name']}",style: GoogleFonts.notoSansThai(color: Colors.black,fontWeight: FontWeight.bold),),
                        subtitle: Text("‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ: ${party['leader_name']}",style: TextStyle(fontWeight: FontWeight.bold),),
                      ),
                      if (party['images'].isNotEmpty)
                        Container(
                          height: 150,
                          child: ListView.builder(
                            scrollDirection: Axis.horizontal,
                            itemCount: party['images'].length,
                            itemBuilder: (context, i) {
                              return Padding(
                                padding: EdgeInsets.all(5),
                                child: Image.network(
                                  'http://10.0.2.2:8000${party['images'][i]}',
                                  width: 150,
                                  fit: BoxFit.cover,
                                ),
                              );
                            },
                          ),
                        ),
                      if (canUpload)
                        Padding(
                          padding: EdgeInsets.symmetric(horizontal: 10),
                          child: ElevatedButton.icon(
                            onPressed: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) =>
                                      UploadMemoryPage(party: party),
                                ),
                              );
                            },
                            icon: Icon(Icons.add_a_photo),
                            label: Text("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ"),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.green,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ),
                      Padding(
                        padding: EdgeInsets.all(10),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("üí¨ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:",
                               style: GoogleFonts.notoSansThai(textStyle: TextStyle(fontWeight: FontWeight.bold,fontSize:16))),
                            if (party['reviews'].isEmpty) Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"),
                            if (party['reviews'].isNotEmpty)
                              Column(
                                children: List.generate(party['reviews'].length,
                                    (index) {
                                  var review = party['reviews'][index];
                                  return ListTile(
                                    title: Text("${review['voter']}",style:GoogleFonts.notoSansThai(textStyle: TextStyle(fontWeight: FontWeight.bold,fontSize:14))),
                                    subtitle: Text("${review['review']}"),
                                    trailing: Text("‚≠ê ${review['rating']}"),
                                  );
                                }),
                              ),
                          ],
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
    );
  }
}

//‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£memmory‡∏Ç‡∏≠‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
class CreatedPartyMemoryPage extends StatefulWidget {
  @override
  _CreatedPartyMemoryPageState createState() => _CreatedPartyMemoryPageState();
}

class _CreatedPartyMemoryPageState extends State<CreatedPartyMemoryPage> {
  List<Map<String, dynamic>> createdPartyHistory = [];
  bool memoryloading=true;

  @override
  void initState() {
    super.initState();
    fetchCreatedPartyHistory();
  }

  Future<void> fetchCreatedPartyHistory() async {
    final prefs = await SharedPreferences.getInstance();
    String? accessToken = prefs.getString('access_token');
    try {
      final response = await http.get(
          Uri.parse('http://10.0.2.2:8000/Smartwityouapp/creatpartyhistory/'),
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $accessToken',
          });
      if (response.statusCode == 200) {
        final data = jsonDecode(utf8.decode(response.bodyBytes));
        print('üìú ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤:${data}');
        final List<dynamic> historyData = data['created_parties'] ?? [];

        setState(() {
          memoryloading=false;
          createdPartyHistory = historyData.cast<Map<String, dynamic>>();
        });
      }
    } catch (e) {
      print('Error:${e}');
    }
  }

  void _openShareDialog(Map<String, dynamic> memory) {
    TextEditingController captionController = TextEditingController();
    List<String> selectedImages = []; // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(builder: (context, setState) {
          return AlertDialog(
            title: Text("üì∏ ‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥"),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text("üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"),
                TextField(
                  controller: captionController,
                  maxLines: 3,
                  decoration: InputDecoration(
                    hintText: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡πà‡∏ô...",
                    border: OutlineInputBorder(),
                  ),
                ),
                SizedBox(height: 10),
                Text("üì∑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå"),
                Wrap(
                  spacing: 5,
                  children: List.generate(memory['images'].length, (index) {
                    String imageUrl = memory['images'][index];
                    bool isSelected = selectedImages.contains(imageUrl);

                    return GestureDetector(
                      onTap: () {
                        setState(() {
                          if (isSelected) {
                            selectedImages.remove(imageUrl);
                          } else {
                            selectedImages.add(imageUrl);
                          }
                        });
                      },
                      child: Stack(
                        children: [
                          Image.network(
                            'http://10.0.2.2:8000$imageUrl',
                            width: 80,
                            height: 80,
                            fit: BoxFit.cover,
                          ),
                          if (isSelected)
                            Positioned(
                              top: 5,
                              right: 5,
                              child: Icon(Icons.check_circle,
                                  color: Colors.green, size: 20),
                            ),
                        ],
                      ),
                    );
                  }),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"),
              ),
              ElevatedButton(
                onPressed: () {
                  _shareMemory(memory, captionController.text, selectedImages);
                },
                child: Text("üì¢ ‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏•‡∏¢!"),
              ),
            ],
          );
        });
      },
    );
  }

  Future<void> _shareMemory(Map<String, dynamic> memory, String caption,
      List<String> selectedImages) async {
    final prefs = await SharedPreferences.getInstance();
    String? accessToken = prefs.getString('access_token');
    String? userId = prefs.getString('userid');

    try {
      final response = await http.post(
        Uri.parse('http://10.0.2.2:8000/Smartwityouapp/sharememoryforleader/'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $accessToken',
        },
        body: json.encode({
          "user_id": userId ?? '',
          "party_id": memory['id'],
          "text": caption,
          "selected_images":
              selectedImages, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        }),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‚úÖ ‡πÅ‡∏ä‡∏£‡πå Memory ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå Memory ‡πÑ‡∏î‡πâ!")),
        );
      }
    } catch (e) {
      print("‚ö†Ô∏è Error: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("üëë ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á",style:  GoogleFonts.notoSansThai(
        fontWeight: FontWeight.bold,
        color: Colors.white,
      ),),
        backgroundColor: Colors.orange,
      ),
      backgroundColor: Colors.grey[800],
      body: 
      
      memoryloading ?
      Center(
        child: Center(
          child: Center(
                  child: Center(child: Center(child: CircularProgressIndicator(color: Colors.orange)) ,),
              ),
      )
      ):
      createdPartyHistory.isEmpty
          ? Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
                Icon(
            Icons.camera_alt, // üí° ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠"
            size: 80,
            color: Colors.grey[600],
          ),
          
         
            ],
          ),
          const SizedBox(height: 16),
           const Text(
            '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏•‡∏≤‡∏ö‡∏±‡πâ‡∏°',
            style: TextStyle(
              fontSize: 18,
              color: Colors.grey,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      )
          : ListView.builder(
              itemCount: createdPartyHistory.length,
              itemBuilder: (context, index) {
                var party = createdPartyHistory[index];

                // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏à‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏µ‡πà‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                DateTime completedAt =
                    DateTime.parse(party['completed_at']); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏à‡∏ö
                DateTime now = DateTime.now();
                bool canUpload = now.difference(completedAt).inHours <
                    24; // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏°.

                return Card(
                  margin: EdgeInsets.all(10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          ElevatedButton.icon(
                            onPressed: () {
                              _openShareDialog(party);
                            },
                            label: Text('‡πÅ‡∏ä‡∏£‡πå'),
                            icon: Icon(Icons.share),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.blue,
                              foregroundColor: Colors.white,
                            ),
                          ),
                          SizedBox(
                            width: 7,
                          ),
                          IconButton(
                              onPressed: () {

                                
                              },
                              icon: Icon(
                                Icons.delete,
                                color: Colors.red,
                              )),
                          SizedBox(width: 10),
                        ],
                      ),
                      ListTile(
                        title: Text("${party['party_name']}",style: GoogleFonts.notoSansThai(color: Colors.black,fontWeight: FontWeight.bold),),
                        subtitle: Text("‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ: ${party['leader_name']}",style: TextStyle(fontWeight: FontWeight.bold),),
                      ),

                      if (party['images'].isNotEmpty)
  Padding(
    padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 5),
    child: party['images'].length == 1
        ? ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: Image.network(
              'http://10.0.2.2:8000${party['images'][0]}',
              width: double.infinity,
              height: 180,
              fit: BoxFit.cover,
            ),
          )
        : Container(
            height: 120,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: party['images'].length,
              itemBuilder: (context, i) {
                return Container(
                  margin: EdgeInsets.only(right: 10),
                  width: 160,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.3),
                        blurRadius: 6,
                        offset: Offset(0, 3),
                      ),
                    ],
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(12),
                    child: Image.network(
                      'http://10.0.2.2:8000${party['images'][i]}',
                      fit: BoxFit.cover,
                    ),
                  ),
                );
              },
            ),
          ),
  ),

                      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ" ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏°.
                      if (canUpload)
                        Padding(
                          padding: EdgeInsets.symmetric(horizontal: 10),
                          child: ElevatedButton.icon(
                            onPressed: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) =>
                                      UploadMemoryPage(party: party),
                                ),
                              );
                            },
                            icon: Icon(Icons.add_a_photo),
                            label: Text("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ"),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.green,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ),

                      Padding(
                        padding: EdgeInsets.all(10),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("üí¨ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:",
                                style: GoogleFonts.notoSansThai(textStyle: TextStyle(fontWeight: FontWeight.bold,fontSize:16))),
                            if (party['reviews'].isEmpty) Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"),
                            if (party['reviews'].isNotEmpty)
                              Column(
                                children: List.generate(party['reviews'].length,
                                    (index) {
                                  var review = party['reviews'][index];
                                  return ListTile(
                                    title: Text("${review['voter']}",style:GoogleFonts.notoSansThai(textStyle: TextStyle(fontWeight: FontWeight.bold,fontSize:14))),
                                    subtitle: Text("${review['review']}"),
                                    trailing: Text("‚≠ê ${review['rating']}"),
                                  );
                                }),
                              ),
                          ],
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
    );
  }
}
