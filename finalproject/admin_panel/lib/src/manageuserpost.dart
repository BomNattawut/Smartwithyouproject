import 'package:flutter/material.dart';
import 'package:admin_panel/src/services/auth_service.dart';

class ManageUserPostsPage extends StatefulWidget {
  @override
  _ManageUserPostsPageState createState() => _ManageUserPostsPageState();
}

class _ManageUserPostsPageState extends State<ManageUserPostsPage> {
  List<Map<String, dynamic>> posts = [];
  final AuthService _authService = AuthService();
  bool isLoading=true;
  int _currentIndex=5;

  @override
  void initState() {
    super.initState();
    loadPosts(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `getUserPosts()`
  Future<void> loadPosts() async {
    try {
      List<Map<String, dynamic>>? fetchedPosts = await _authService.getUserPosts();
      if (fetchedPosts != null) {
        setState(() {
          posts = fetchedPosts;
          isLoading=false;
        });
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ");
      }
    } catch (e) {
      print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
    }
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå
  Future<void> deletePost(int postId) async {
    try {
      bool? success = await _authService.deletePost(postId);
      if (success==true) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("‚úÖ ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")));
        loadPosts(); // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ")));
      }
    } catch (e) {
      print("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå: $e");
    }
  }
  void _onTabTapped(int index) {
    setState(() {
      _currentIndex = index;
    });

    switch (index) {
      case 0:
        Navigator.pushNamed(context, '/dashboard');
        break;
      case 1:
        Navigator.pushNamed(context,'/usermanage');
        break;
      case 2:
        Navigator.pushNamed(context, '/partymanage');
      case 4:
         Navigator.pushNamed(context, '/locationmanage');
      case 3:
          Navigator.pushNamed(context, '/exerciseType');
      case 6:
        Navigator.pushNamed(context, '/adminupdates');
      
    }
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  void confirmDelete(int postId) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö"),
        content: Text("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ?"),
        actions: [
          TextButton(
            child: Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"),
            onPressed: () => Navigator.pop(context),
          ),
          TextButton(
            child: Text("‡∏•‡∏ö"),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            onPressed: () {
              Navigator.pop(context);
              deletePost(postId);
            },
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("üì¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"),
        backgroundColor: Colors.orange,
      ),
      body: posts.isEmpty
          ? Center(child: isLoading ==true? CircularProgressIndicator():Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå',style: TextStyle(fontSize: 20),))
          : ListView.builder(
              itemCount: posts.length,
              itemBuilder: (context, index) {
                final post = posts[index];
                return buildPostItem(post);
              },
            ),
     bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: _onTabTapped,
        backgroundColor: Colors.orange,
        selectedItemColor: Colors.black,
        unselectedItemColor: Colors.grey,
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.dashboard), label: "Dashboard"),
          BottomNavigationBarItem(icon: Icon(Icons.people), label: "User"),
          BottomNavigationBarItem(icon: Icon(Icons.event), label: "Party"),
          BottomNavigationBarItem(icon: Icon(Icons.fitness_center), label: "Exercise"),
          BottomNavigationBarItem(icon: Icon(Icons.location_on), label: "Location"),
          BottomNavigationBarItem(icon: Icon(Icons.comment), label: "mangepose"),
          BottomNavigationBarItem(icon: Icon(Icons.post_add), label: "Update"),
        ],
      ), 
    );
  }

  // ‚úÖ Widget ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
 Widget buildPostItem(Map<String, dynamic> post) {
  return Card(
    margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    elevation: 4,
    child: Padding(
      padding: const EdgeInsets.all(14.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // üîπ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå
          Row(
            children: [
              post["user_data"]["profile_image"] != null
                  ? ClipOval(
                      child: Image.network(
                        "http://localhost:8000${post["user_data"]["profile_image"]}",
                        width: 45,
                        height: 45,
                        fit: BoxFit.cover,
                      ),
                    )
                  : Icon(Icons.account_circle,
                      size: 45, color: Colors.orange[200]),
              SizedBox(width: 12),
              Expanded(
                child: Text(
                  post["user_data"]["username"] ?? "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠",
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                    fontFamily: 'NotoSansThai',
                    color: Colors.orange[900],
                  ),
                ),
              ),
              IconButton(
                icon: Icon(Icons.delete, color: Colors.red),
                onPressed: () => confirmDelete(post["id"]),
              ),
            ],
          ),
          SizedBox(height: 12),

          // üîπ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå
          Text(
            post["text"] ?? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
            style: TextStyle(
              fontSize: 15,
              fontFamily: 'NotoSansThai',
              color: Colors.black87,
            ),
          ),
          SizedBox(height: 12),

          // üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
          if (post["images"] != null && post["images"].isNotEmpty) ...[
            Container(
              height: 160,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: post["images"].length,
                itemBuilder: (context, index) {
                  return Padding(
                    padding: const EdgeInsets.only(right: 10),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(12),
                      child: Image.network(
                        "http://localhost:8000${post["images"][index]}",
                        width: 160,
                        height: 160,
                        fit: BoxFit.cover,
                      ),
                    ),
                  );
                },
              ),
            ),
            SizedBox(height: 10),
          ],

          // üîπ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
          Text(
            "üìÖ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${post["created_at"]}",
            style: TextStyle(
              fontSize: 12,
              fontFamily: 'NotoSansThai',
              color: Colors.grey[600],
            ),
          ),
        ],
      ),
    ),
  );
}

}
